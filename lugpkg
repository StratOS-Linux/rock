#!/bin/bash

tabs -4

# Gruvbox Colors
if [[ -z $NO_COLOR ]]; then
    # Gruvbox Colors
    BBlack='\033[1;30m'    # Black
    BRed='\033[1;31m'      # Red
    BGreen='\033[1;32m'    # Green
    BYellow='\033[1;33m'   # Yellow
    BBlue='\033[1;34m'     # Blue
    BPurple='\033[1;35m'   # Purple
    BCyan='\033[1;36m'     # Cyan
    BWhite='\033[1;37m'    # White
    BOrange='\033[1;38;5;208m'
    NC='\033[0m'           # No Color
fi

help_flag="USAGE: $(basename $0) [function] {flag} <input>

functions:
    install: Install package(s) - Prompts user to respond with 
             the number(s) associated with the desired package(s).
             
    remove:  Uninstall package(s) - Prompts user to respond with
             the number(s) associated with the desired package(s).

    info: Provide information about the package.
             
    search:  Search for package(s) - Does not have a second prompt.
    
    update:  Updates all packages accessible to the wrapper - does
             not accept <input>, instead use install to update 
             individual packages. Has a confirmation prompt.

    cleanup: Attempts to repair broken dependencies and remove any
             unused packages. Does not accept <input>, but has 
             a confirmation prompt.

flags: 
    --help/-h: Display this page
    
    --description/-d: By default, $(basename $0) will only display packages 
    that contain <input> within their name. Use this flag to increase 
    range and display packages with <input> in their description.

    -y: Makes functions with confirmation prompts run promptless.
    
input: 
    Provide a package name or description.

Example execution:
    \$ $(basename $0) install foobar
    Found packages matching '${BPurple}foobar${NC}':

    [${BGreen}0${NC}]: pyfoobar (${BGreen}apt${NC})
    [${BGreen}1${NC}]: foobarshell (${BGreen}apt${NC})
    [${BCyan}2${NC}]: foobar (${BCyan}flatpak${NC})
    [${BOrange}3${NC}]: foobar (${BOrange}pacman${NC})
    [${BYellow}4${NC}]: foobar-bin (${BYellow}yay${NC})
    [${BYellow}5${NC}]: foobar-theme (${BYellow}yay${NC})
    [${BRed}6${NC}]: foobar-web (${BRed}snap${NC})

    Select which package to install [0-5]: 3 4 5
    Selecting '${BPurple}foobar-web${NC}' from package manager '${BPurple}snap${NC}'
    Selecting '${BPurple}foobar-bin${NC}' from package manager '${BPurple}yay${NC}'
    Selecting '${BPurple}foobar-theme${NC}' from package manager '${BPurple}yay${NC}'
    Are you sure? (${BGreen}y${NC}/${BRed}N${NC})
    [...]

${c1}       .;:;,.  .:       
${c1}    'coooooooo:oo.';.   
${c1}  ,oooooooooooooooo    ;
${c1} clllcccllloooooooo;c:'o
${c1}.${c3};${c4}';:::::::::${c1}cclooooooo'
${c3}''',${c4}::::::::::::::${c1}ccclc.
${c3}.'''${c4};::::::::::${c2}l${c4}::::::: 
${c3} ''''${c4},:::::::::${c2}kd${c4}.      
${c3} .'''''${c4},;::${c2}ck:${c2}oW${c4};       
${c3}   ''''''''${c2}kXOM.        
${c3}     .,,:${c2}dXMK           
${c3}       ${c2}:k

$(basename "$0") 0.1.2
A package manager wrapper for lugOS
Developed by ZeStig <o0vckutt@duck.com> for lugOS."

function msg() {
    local input="$*"
    echo -e "$input"
}

function prompt() {
    local input="$1"
    local index="$2"
    echo -ne "$input [0-$index]: ${BWhite}"
}

function clearscr() {
    tput cuu 1 && tput el
}

function info_package() {
    local package_name="$1"
    local sources=($(get_installed_sources "$package_name"))

    if [ ${#sources[@]} -eq 0 ]; then
        echo "Package '$package_name' is not installed."
        exit 1
    fi

    echo -e "Package '${BWhite}${BPurple}$package_name${NC}' is installed using the following package manager(s):"  # Bold white color for installed packages
    echo
    for source in "${sources[@]}"; do
        case "$source" in
            "AUR"|"yay")
		if [[ $(yay -Qi "$package_name" | grep -i "Validated" | awk '{print $4}') == "None" ]]; then
                    echo -e "[${BYellow}y${NC}]: ${BWhite}$(yay -Qi $package_name | head -n 1 | awk '{printf $3}') (${BYellow}yay${NC})"
		    echo 
		    yay -Qi "$package_name"
                fi
                ;;
            
            "pacman")
		if [[ $(yay -Qi "$package_name" | grep -i "Validated" | awk '{print $4}') != "None" ]]; then
                    echo -e "[${BOrange}p${NC}]: ${BWhite}$(pacman -Qi $package_name | head -n 1 | awk '{printf $3}') (${BOrange}pacman${NC})"
		    echo 
		    pacman -Qi "$package_name"
                fi
                ;;
            
            "snap")
                snap_name=$(snap list "$package_name" | awk '{print $1}' | tail -n 1)
                echo -e "[${BRed}s${NC}]: ${BWhite}$package_name (${BRed}snap${NC})"
                ;;
            
            "flatpak")
                echo -e "[${BCyan}f${NC}]: ${BWhite}$(flatpak list --app --columns=application,ref | grep -i $package_name | awk '{print $1}') (${BCyan}flatpak${NC})"
		echo
		flatpak info `flatpak list --app --columns=application,ref | grep -i $package_name | awk '{print $1}'` 
                ;;
            
            "apt")
                echo -e "[${BGreen}a${NC}]: ${BWhite}$package_name (${BGreen}apt${NC})"
                ;;
        esac
    done
}

function search_yay() {
    local search_term="$*"
    local installed_packages=()

    # Get the list of packages from yay
    local contents=("$(yay -Ssa --topdown "$search_term" | awk -F/ '/^[^ ]/ {print $2}' | awk '{print $1}' | grep -i "$search_term" | uniq)")

    # Check if each package is installed and add to the installed_packages array
    for package in $contents; do
        if yay -Qi "$package" &>/dev/null; then
            installed_packages+=("${BWhite}$package${NC}")
        else
            installed_packages+=("$package")
        fi
    done

    # Print the modified list
    if [[ -n $installed_packages ]]; then
        echo -e "${installed_packages[@]}"
    else
        return 1
    fi
}


function search_pacman() {
    local search_term="$*"
    local installed_packages=()
    local contents=("$(pacman -Ss "$search_term" | awk -F/ '/^[^ ]/ {print $2}' | awk '{print $1}')")
    # Check if each package is installed and add to the installed_packages array
    for package in $contents; do
        if yay -Qi "$package" &>/dev/null; then
            installed_packages+=("${BWhite}$package${NC}")
        else
            installed_packages+=("$package")
        fi
    done

    # Print the modified list
    if [[ -n $installed_packages ]]; then
        echo -e "${installed_packages[@]}"
    else
        return 1
    fi
}

function search_apt() {
    if [[ -z $DESCRIPTION ]]; then
        local contents=("$(apt-cache search --names-only "$*" | awk '{print $1}')")
    else
        local contents=("$(apt-cache search "$*" | awk '{print $1}')")
    fi
    if [[ -n $contents ]]; then
        echo -e "${contents[@]}"
    else
        return 1
    fi
}

function search_flatpak() {
    local search_term="$*"
    local installed_packages=()

    # Get the list of packages from flatpak
    if [[ -z $DESCRIPTION ]]; then
        local contents=("$(flatpak search --columns='application' "$search_term" | grep -i --color=never "$search_term")")
    else
        local contents=("$(flatpak search --columns='application' "$search_term")")
    fi

    # Check if each package is installed and add to the installed_packages array
    for package in $contents; do
        if flatpak list | grep -q "$package"; then
            installed_packages+=("${BWhite}$package${NC}")
        else
            installed_packages+=("$package")
        fi
    done

    # Print the modified list
    if [[ ${installed_packages[*]} == "No matches found" ]]; then
        return 1
    else
        echo -e "${installed_packages[@]}"
    fi
}


function search_snap() {
    if [[ -z $DESCRIPTION ]]; then
        local contents=("$(snap find "$*" | awk '{ print $1 }' | tail -n +2 | grep -i --color=never "$*")")
    else
        local contents=("$(snap find "$*" | awk '{ print $1 }' | tail -n +2)")
    fi
    if [[ ${contents[*]} == "No matching snaps for"* ]]; then
        return 1
    else
        echo -e "${contents[@]}"
    fi
}

function get_installed_sources() {
    local package_name="$1"
    local sources=()

    # Check if the package is installed using yay
    if yay -Qi "$package_name" &>/dev/null; then
        # Check if the Packager is "UnknownPackager" to determine AUR
        if yay -Qi "$package_name" | grep -i "Packager" | awk '{print $3 $4}' | grep -q "UnknownPackager"; then
            sources+=("AUR")
        elif ! pacman -Qi "$package_name" | grep -i "Packager" | awk '{print $3 $4}' | grep -q "UnknownPackager"; then
            sources+=("pacman")
        fi
    fi

    # Check if the package is installed using flatpak
    if flatpak list | grep -q "$package_name"; then
        sources+=("flatpak")
    fi

    # Check if the package is installed using apt
    if apt list --installed 2>/dev/null | grep -q "^$package_name/"; then
        sources+=("apt")
    fi

    # Check if the package is installed using snap
    if snap list "$package_name" &>/dev/null; then
        sources+=("snap")
    fi

    echo "${sources[@]}"
}


function display_installed_sources() {
    local package_name="$1"
    local sources=($(get_installed_sources "$package_name"))

    if [ ${#sources[@]} -eq 0 ]; then
        echo "Package '$package_name' is not installed."
        exit 1
    fi

    echo -e "Package '${BWhite}${BPurple}$package_name${NC}' is installed using the following package managers:"  # Bold white color for installed packages

    for source in "${sources[@]}"; do
        case "$source" in
            "AUR"|"yay")
                if yay -Qi "$package_name" | grep -i "Packager" | awk '{print $3 $4}' | grep -q "UnknownPackager"; then
                    echo -e "[${BYellow}y${NC}]: ${BWhite}$(yay -Qi $package_name | head -n 1 | awk '{printf $3}') (${BYellow}yay${NC})"
                fi
                ;;
            
            "pacman")
                if ! yay -Qi "$package_name" | grep -i "Packager" | awk '{print $3 $4}' | grep -q "UnknownPackager"; then
                    echo -e "[${BOrange}p${NC}]: ${BWhite}$(pacman -Qi $package_name | head -n 1 | awk '{printf $3}') (${BOrange}pacman${NC})"
                fi
                ;;
            
            "snap")
                snap_name=$(snap list "$package_name" | awk '{print $1}' | tail -n 1)
                echo -e "[${BRed}s${NC}]: ${BWhite}$package_name (${BRed}snap${NC})"
                ;;
            
            "flatpak")
                echo -e "[${BCyan}f${NC}]: ${BWhite}$(flatpak list --app --columns=application,ref | grep -i $package_name | awk '{print $1}') (${BCyan}flatpak${NC})"
                ;;
            
            "apt")
                echo -e "[${BGreen}a${NC}]: ${BWhite}$package_name (${BGreen}apt${NC})"
                ;;
        esac
    done
}


case "${1}" in
    s | search)
        SEARCH=true
        shift
        ;;
    i | in | install)
        INSTALL=true
        shift
        ;;
    r | rm | remove)
        REMOVE=true
        shift
        ;;
    c | cl | clean | cleanup)
        CLEANUP=true
        shift
        if [[ $1 == "-y" ]]; then
            PROMPTLESS=true
            shift
        fi
        ;;
    u | up | update)
        UPDATE=true
        shift
        if [[ $1 == "-y" ]]; then
            PROMPTLESS=true
            shift
        fi
        ;;
    h | help | -h | --help)
        echo -e "$help_flag"
        exit 0
        ;;
    i | info)
	INFO=true
	shift
	;;
    *)
        echo -e "$help_flag"
        exit 1
        ;;
esac

if [[ $1 == "-d" || $1 == "--description" ]]; then
    DESCRIPTION=true
    shift
fi

if [[ -n $INFO ]]; then
    if [[ -z $* ]]; then
        echo "Please provide a package name for info."
        exit 1
    fi
    for package_name in $*; do
        info_package "$package_name"
    done
    exit 0
fi

if [[ -n $UPDATE ]]; then
    if [[ -n $* ]]; then
        exit 1
    fi
    if [[ -z $PROMPTLESS ]]; then
        echo -ne $"Are you sure you want to update all packages? (${BGreen}y${NC}/${BRed}N${NC}) "
        read -ra read_update
        echo -ne "${NC}"
    else
        read_update=("Y")
    fi
    case "${read_update[0]}" in
        Y* | y*) ;;
        *) exit 1 ;;
    esac
    if command -v yay &> /dev/null; then
        if [[ -n $PROMPTLESS ]]; then
            yay -Syu --noconfirm
        else
            yay -Syu
        fi
    fi
    if command -v flatpak &> /dev/null; then
        if [[ -n $PROMPTLESS ]]; then
            flatpak --user update -y
        else
            flatpak --user update
        fi
    fi
    if command -v snap &> /dev/null; then
        sudo snap refresh
    fi
    exit 0
fi

if [[ -n $CLEANUP ]]; then
    if [[ -n $* ]]; then
        exit 1
    fi
    if [[ -z $PROMPTLESS ]]; then
        echo -ne $"Attempting to repair dependencies and remove unused packages. Continue? (${BGreen}y${NC}/${BRed}N${NC}) "
        read -ra read_update
        echo -ne "${NC}"
    else
        read_update=("Y")
    fi
    case "${read_update[0]}" in
        Y* | y*) ;;
        *) exit 1 ;;
    esac
    if command -v yay &> /dev/null; then
        if [[ -n $PROMPTLESS ]]; then
            yay -Rns $(yay -Qdtq) --noconfirm
        else
            yay -Rns $(yay -Qdtq)
        fi
    fi
    if command -v flatpak &> /dev/null; then
        if [[ -n $PROMPTLESS ]]; then
            flatpak --user repair && flatpak --user uninstall --unused -y
        else
            flatpak --user repair && flatpak --user uninstall --unused
        fi
    fi
    if command -v snap &> /dev/null; then
        if [[ -z "$(LANG=C snap list --all | while read snapname ver rev trk pub notes; do if [[ "$notes" == *disabled* ]]; then sudo snap remove "$snapname" --revision="$rev"; fi; done)" ]]; then
            echo -e "Nothing for snap to clean."
        fi
    fi
    exit 0
fi

# Lowercase the rest of input
set -- "${*,,}"

if [[ -z $REMOVE ]]; then
    if command -v yay &> /dev/null; then
	msg $"Searching AUR…"
	yay_search_list=($(search_yay $*))
	clearscr
    fi
    if command -v pacman &> /dev/null; then
	msg $"Searching pacman…"
	pacman_search_list=($(search_pacman $*))
	clearscr
    fi
    if command -v apt &> /dev/null; then
	msg $"Searching apt…"
	apt_search_list=($(search_apt $*))
	clearscr
    fi
    if command -v flatpak &> /dev/null; then
	msg $"Searching flatpak…"
	flatpak_search_list=($(search_flatpak $*))
	clearscr
    fi
    if command -v snap &> /dev/null; then
	msg $"Searching snap…"
	snap_search_list=($(search_snap $*))
	clearscr
    fi

    if [[ ${#pacman_search_list} -eq 0 && ${#yay_search_list} -eq 0 && ${#apt_search_list} -eq 0 && ${#flatpak_search_list} -eq 0 && ${#snap_search_list} -eq 0 ]]; then
	msg $"No packages found matching '$*'!"
	exit 1
    fi
fi

# msg $"Found packages matching '${BPurple}$*${NC}':"
# echo

count=0
pkgs=()
pkgrepo=()

for i in "${flatpak_search_list[@]}"; do
    echo -e "[${BCyan}$count${NC}]: $i (${BCyan}flatpak${NC})"
    pkgs+=("$i")
    pkgrepo+=("flatpak")
    ((count++))
done
for i in "${apt_search_list[@]}"; do
    echo -e "[${BGreen}$count${NC}]: $i (${BGreen}apt${NC})"
    pkgs+=("$i")
    pkgrepo+=("apt")
    ((count++))
done
for i in "${pacman_search_list[@]}"; do
    echo -e "[${BOrange}$count${NC}]: $i (${BOrange}pacman${NC})"
    pkgs+=("$i")
    pkgrepo+=("pacman")
    ((count++))
done
for i in "${yay_search_list[@]}"; do
    echo -e "[${BYellow}$count${NC}]: $i (${BYellow}yay${NC})"
    pkgs+=("$i")
    pkgrepo+=("yay")
    ((count++))
done
for i in "${snap_search_list[@]}"; do
    echo -e "[${BRed}$count${NC}]: $i (${BRed}snap${NC})"
    pkgs+=("$i")
    pkgrepo+=("snap")
    ((count++))
done

((count--))

if [[ -n $SEARCH ]]; then
    exit 0
fi
NC='\033[0m'
# echo

if [[ -n $INSTALL ]]; then
    flatpak_cmd="install"
    snap_cmd="install"
    apt_cmd="install"
    pacman_cmd="-S"
    yay_cmd="-S"
    prompt $"Select which package to install" "$count"

elif [[ -n $REMOVE ]]; then
    if [[ -n $* ]]; then
	for package_name in $*; do
	    display_installed_sources "$package_name"
	    echo -ne "Select which package to remove [${BOrange}p${NC}/${BCyan}f${NC}/${BYellow}y${NC}]: ${BWhite}"
	    read -r selected_source

            case "$selected_source" in
		"p")
                    # Remove the Pacman package
                    sudo pacman -Rns "$package_name" --noconfirm
                    ;;
		"f")
                    # Remove the Flatpak package
                    flatpak uninstall "$package_name" -y
                    ;;
		"y")
                    # Remove the AUR package
                    yay -Rns "$package_name" --noconfirm
                    ;;
		"")
                    echo "Invalid input. Exiting."
                    exit 1
                    ;;
		*)
                    echo "Invalid selection. Exiting."
                    exit 1
                    ;;
            esac
	done
    else
	echo "Please provide at least one package name to remove."
	exit 1
    fi

  exit 0
fi
read -ra entered_input
echo -ne "${NC}"
if [[ ${entered_input[*]} =~ ^[Qq]$|quit$ ]]; then
    msg "Exiting"
    exit 1
fi
if [[ ! ${entered_input[*]} =~ ^[0-9]+(\s[0-9]+)*$ ]]; then
    msg $"'${entered_input[*]}' is not a valid number"
    exit 1
fi

for i in "${entered_input[@]}"; do
    msg $"Selecting '${BPurple}${pkgs[i]}${NC}' from package manager '${BPurple}${pkgrepo[i]}${NC}'"
done

echo -ne $"Are you sure? (${BGreen}y${NC}/${BRed}N${NC}) "
read -r sure
case "${sure}" in
    Y* | y*)
        true
        ;;
    *)
        exit 1
        ;;
esac
export NO_COLOUR=true
for i in "${entered_input[@]}"; do
    case "${pkgrepo[i]}" in
        flatpak)
            flatpak "${flatpak_cmd}" "${pkgs[i]}" -y
            ret=$?
            ;;
        apt)
            sudo apt "${apt_cmd}" "${pkgs[i]}" -y
            ret=$?
            ;;
	pacman) 
	    sudo pacman "${pacman_cmd}" "${pkgs[i]}"
	    ret=$?
	    ;;
        yay)
            yay "${yay_cmd}" "${pkgs[i]}"
            ret=$?
            ;;
        snap)
            sudo snap "${snap_cmd}" "${pkgs[i]}"
            ret=$?
            ;;
    esac
    if [[ $ret -ne 0 ]]; then
        msg $"\nError while installing '${BPurple}${pkgs[i]}${NC}' from package manager '${BPurple}${pkgrepo[i]}${NC}'"
        exit 1
    fi
done
